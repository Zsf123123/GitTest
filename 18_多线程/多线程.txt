概述:
	进程: 可执行文件(程序).  		例如: .exe
	线程: 进程的执行单元(路径).
	多线程: 进程有多条执行路径.
	
举例:
	QQ, 飞秋, 杀毒软件.
	
	喝茶的步骤:
		洗水壶, 接水, 烧水, 洗茶杯, 洗茶, 泡茶, 喝茶
		单线程的做法: 上边的步骤应该一个一个实现, 前边的动作没有做完, 后续的动作没办法做.
		多线程的做法: 在烧水的同时, 可以做洗水杯, 洗茶的动作.
		统筹规划(小学语文课)   --> 华罗庚
		
记忆:
	1. 一台电脑上可以有多个进程, 这些进程之间的数据是隔离的.
	2. 一个进程可以有多条线程, 这些线程共享当前进程的数据.
	
	
多线程并行 和 多线程并发的区别:
	多线程并行: 多个线程同时执行.  前提: 需要多核CPU.
	多线程并发: 多个线程同时请求执行, 但是CPU同时只能执行一个, 于是就安排这些线程交替执行.
			由于时间间隔非常短, 我们看起来好像是同时执行的, 其实不是.
	
	
 多线程的实现方式:
 	方式一: 继承Thread类.
 		1. 定义一个类(MyThread)去继承Thread.
 		2. 重写Thread#run(), 把要执行的代码写到run()中.
 		3. 创建线程对象.
 		4. 开启线程.
 		 注意:
 			a.开启线程调用的是start().
 			b.同一线程不能重复开启, 否则会报"线程状态非法异常".
 			IllegalThreadStateException
 	
	方式二: 实现Runnable接口.
		1. 定义一个类(MyRunnable)去实现Runnable接口.
		2. 重写Runnable#run(), 把要执行的代码写到run()中.
		3. 创建Runnable接口的子类对象, 将其作为参数传入Thread类的构造, 创建线程对象.
		4. 开启线程.
	
多线程的两种实现方式有什么区别?
	方式一: 继承Thread类.
		好处: 代码相对比较简单. 因为是直接继承Thread类, 所以可以直接使用Thread类中的方法.
		弊端: 扩展性较差. 因为已经继承Thread类了, 就不能继承别的类了.
	
	方式二: 实现Runnable接口.
		好处: 扩展性比较强.
		弊端: 代码相对比较繁琐.


多线程的执行特点:
	多线程的执行具有: 随机性, 延迟性. 原因是因为CPU在做着高效的切换.
	
	

Thread类中的构造方法和常用方法:
	构造方法:
		public Thread();
		public Thread(String name);
		public Thread(Runnable target);
		public Thread(Runnable target, String name);
		
	常用方法:
		start();  开启线程
		getName(); 获取线程名字, 线程名字的默认命名规则: Thread-编号, 编号从0开始.
	
	
多线程的安全(同步)问题:
	概述: 多线程 并发  操作同一数据, 就有可能引发安全问题, 此时就需要用到同步解决.
	
	同步:
		同步代码块:
			格式:
				synchronized(锁对象) {
					//要加锁的代码
				}
			记忆:
				1. 同步代码块的锁对象可以是任意类型的对象.
				2. 必须使用同一把锁,, 不然可能出现锁不住的情况.
		同步方法:
			非静态同步方法:
				锁对象: this
			静态同步方法:
				锁对象: 该类的字节码文件对象.
					  该类名.class
	

补充知识点:
	线程安全(同步), 效率低.
	
	
	
	